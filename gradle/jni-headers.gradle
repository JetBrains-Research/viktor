model {
    repositories {
        libs(PrebuiltLibraries) {
            jniHeaders {
                headers.srcDir "$buildDir/include"
            }
        }
    }

    components {

        all {
            binaries.all {
                if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
                    // a sad hack to determine whether TeamCity gradle detects Windows SDK
                    println (toolChain as VisualCpp).windowsSdkDir
                }
                def javaHome = org.gradle.internal.jvm.Jvm.current().javaHome
                def os = targetPlatform.operatingSystem
                if (os.linux) {
                    cppCompiler.args "-I$javaHome/include"
                    cppCompiler.args "-I$javaHome/include/linux"
                } else if (os.macOsX) {
                    cppCompiler.args "-I$javaHome/include"
                    cppCompiler.args "-I$javaHome/include/darwin"
                } else if (os.windows) {
                    cppCompiler.args "/I$javaHome/include"
                    cppCompiler.args "/I$javaHome/include/win32"
                }
            }
        }
    }
}

ext.javah = { jniClass, jniHeader ->
    exec {
        executable org.gradle.internal.jvm.Jvm.current()
                .getExecutable('javah')
        args '-classpath', sourceSets.main.output.classesDir
        args '-o', jniHeader
        args jniClass
    }

    assert jniHeader.exists()
    println "Generated $jniHeader"
}

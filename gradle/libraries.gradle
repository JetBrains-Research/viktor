ext {
    boostSimdBranch = 'v4.16.9.2'
    boostSimdRoot = '4.16.9.2'
    pffftBranch = 'master'
    def os = org.gradle.internal.os.OperatingSystem.current()
    if (os.isMacOsX()) {
        cmakeURL = "https://cmake.org/files/v3.12/cmake-3.12.0-Darwin-x86_64.tar.gz"
        cmakeFile = "cmake-3.12.0.tar.gz"
        cmakeFolder = "cmake-3.12.0-Darwin-x86_64/CMake.app/Contents/bin"
        cmakeTarGz = true
    } else if (os.isWindows()) {
        cmakeURL = "https://cmake.org/files/v3.12/cmake-3.12.0-win64-x64.zip"
        cmakeFile = "cmake-3.12.0.zip"
        cmakeFolder = "cmake-3.12.0-win64-x64/bin"
        cmakeTarGz = false
    } else {
        // assume it's Linux
        cmakeURL = "https://cmake.org/files/v3.12/cmake-3.12.0-Linux-x86_64.tar.gz"
        cmakeFile = "cmake-3.12.0.tar.gz"
        cmakeFolder = "cmake-3.12.0-Linux-x86_64/bin"
        cmakeTarGz = true
    }
}

buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'de.undercouch:gradle-download-task:3.4.3'
    }
}

apply plugin: de.undercouch.gradle.tasks.download.DownloadTaskPlugin

model {
    repositories {
        libs(PrebuiltLibraries) {
            def os = org.gradle.internal.os.OperatingSystem.current()
            boostSimd {
                // This doesn't work yet. See
                // https://discuss.gradle.org/t/prebuilt-libraries-two-things-i-would-find-useful
                // generatedBy installBoostSimd

                headers.srcDir "$buildDir/include"
            }
            pffft_sse2 {
                headers.srcDir "$buildDir/include"
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile =
                            file("$buildDir/include/pffft-master/build/${os.isWindows() ? "PFFFT-sse2.lib" : "libPFFFT-sse2.a"}")
                }
            }
            pffft_avx {
                headers.srcDir "$buildDir/include"
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile =
                            file("$buildDir/include/pffft-master/build/${os.isWindows() ? "PFFFT-avx.lib" : "libPFFFT-avx.a"}")
                }
            }
        }
    }
}

task downloadCmake(type: de.undercouch.gradle.tasks.download.Download) {
    src cmakeURL
    dest new File(buildDir, cmakeFile)     
    acceptAnyCertificate true // for some reason cmake.org certificate can't be verified
    overwrite false
}

task unzipCmake(dependsOn: downloadCmake, type: Copy) {
    if (cmakeTarGz) {
        from tarTree(resources.gzip(downloadCmake.dest))
    } else {
        from zipTree(downloadCmake.dest)
    }
    into buildDir
    outputs.dir new File(buildDir, cmakeFolder)
}

task downloadBoostSimd(type: de.undercouch.gradle.tasks.download.Download) {
    src "https://github.com/JetBrains-Research/boost.simd/archive/${boostSimdBranch}.zip"
    dest new File(buildDir, "boost.simd.${boostSimdBranch}.zip")
    overwrite false
}

task unzipBoostSimd(dependsOn: downloadBoostSimd, type: Copy) {
    from zipTree(downloadBoostSimd.dest)
    into buildDir
    outputs.dir new File(buildDir, "boost.simd-$boostSimdRoot")
}

def nullOutputStream = new OutputStream() {
    @Override
    public void write(int b) {}
}

task installBoostSimd(dependsOn: [unzipBoostSimd, unzipCmake]) {
    def cmakeDir = new File(
        buildDir, "boost.simd-$boostSimdRoot/build")
    def cmakeExec = "$buildDir/$cmakeFolder/cmake"
    outputs.dir new File(buildDir, 'include/boost')
    doLast {
        cmakeDir.mkdirs()

        exec {
            workingDir cmakeDir
            def args = [cmakeExec, '..', '-DUSE_SELF_BOOST=1',
                        "-DCMAKE_INSTALL_PREFIX=$buildDir"]
            def os = org.gradle.internal.os.OperatingSystem.current()
            if (os.isWindows()) {
                args += ['-G', '"Visual Studio 14 2015"']
            }
            commandLine(args)
        }
        exec {
            workingDir cmakeDir
            standardOutput = nullOutputStream
            commandLine(cmakeExec, '--build', '.', '--target', 'update.boost-header-only')
        }
        exec {
            workingDir cmakeDir
            standardOutput = nullOutputStream
            commandLine(cmakeExec, '--build', '.', '--target', 'install')
        }
    }
}

task downloadPffft(type: de.undercouch.gradle.tasks.download.Download) {
    src "https://github.com/dievsky/pffft/archive/refs/heads/${pffftBranch}.zip"
    dest new File(buildDir, "pffft.${pffftBranch}.zip")
    overwrite false
}

task unzipPffft(dependsOn: downloadPffft, type: Copy) {
    from zipTree(downloadPffft.dest)
    into new File(buildDir, "include")
    outputs.dir new File(buildDir, "include/pffft-$pffftBranch")
}

task installPffftSSE2(dependsOn: [unzipPffft, unzipCmake]) {
    def cmakeDir = new File(
            buildDir, "include/pffft-$pffftBranch/build-sse2")
    def cmakeExec = "$buildDir/$cmakeFolder/cmake"
    doLast {
        cmakeDir.mkdirs()

        exec {
            workingDir cmakeDir
            def args = [cmakeExec, '..', "-DCMAKE_INSTALL_PREFIX=$buildDir",
                        "-DCMAKE_POSITION_INDEPENDENT_CODE=ON",
                        "-DDISABLE_SIMD_AVX=ON"]
            def os = org.gradle.internal.os.OperatingSystem.current()
            if (os.isLinux()) {
                args += ["-DUSE_UNALIGNED=ON"]
            }
            if (os.isWindows()) {
                args += ['-G', '"Visual Studio 14 2015"']
            }
            commandLine(args)
        }
        exec {
            workingDir cmakeDir
            // standardOutput = nullOutputStream
            commandLine(cmakeExec, '--build', '.', '--target', 'PFFFT')
        }
    }
}

tasks.register('renamePffftSSE2', Copy) {
    def os = org.gradle.internal.os.OperatingSystem.current()
    dependsOn 'installPffftSSE2'
    from "$buildDir/include/pffft-$pffftBranch/build-sse2/${os.isWindows() ? "Debug/" : ""}"
    into "$buildDir/include/pffft-$pffftBranch/build/"
    rename '(.+)(\\.a|\\.lib)', '$1-sse2$2'
}

task installPffftAVX(dependsOn: [unzipPffft, unzipCmake]) {
    def cmakeDir = new File(
            buildDir, "include/pffft-$pffftBranch/build-avx")
    def cmakeExec = "$buildDir/$cmakeFolder/cmake"
    doLast {
        cmakeDir.mkdirs()

        exec {
            workingDir cmakeDir
            def args = [cmakeExec, '..', "-DCMAKE_INSTALL_PREFIX=$buildDir",
                        "-DCMAKE_POSITION_INDEPENDENT_CODE=ON",
                        "-DDISABLE_SIMD_AVX=OFF"]
            def os = org.gradle.internal.os.OperatingSystem.current()
            if (os.isLinux()) {
                args += ["-DUSE_UNALIGNED=ON"]
            }
            if (os.isWindows()) {
                args += ['-G', '"Visual Studio 14 2015"']
            }
            commandLine(args)
        }
        exec {
            workingDir cmakeDir
            // standardOutput = nullOutputStream
            commandLine(cmakeExec, '--build', '.', '--target', 'PFFFT')
        }
    }
}

tasks.register('renamePffftAVX', Copy) {
    def os = org.gradle.internal.os.OperatingSystem.current()
    dependsOn 'installPffftAVX'
    from "$buildDir/include/pffft-$pffftBranch/build-avx/${os.isWindows() ? "Debug/" : ""}"
    into "$buildDir/include/pffft-$pffftBranch/build/"
    rename '(.+)(\\.a|\\.lib)', '$1-avx$2'
}
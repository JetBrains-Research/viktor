buildscript {
    ext {
        kotlin_version = '1.3.11'
    }

    repositories {
        jcenter()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:0.9.+"
    }
}

plugins {
    id 'com.jfrog.bintray' version '1.8.4'
    id 'me.champeau.gradle.jmh' version '0.3.1'

    // Plugin which shows tasks dependencies, useful for debug:
    // id "com.dorongold.task-tree" version "1.3"
}

apply plugin: 'cpp'
apply plugin: 'kotlin'
apply plugin: 'maven-publish'
apply plugin: 'org.jetbrains.dokka'

apply from: "$rootDir/gradle/jni-headers.gradle"
apply from: "$rootDir/gradle/boost-simd.gradle"
apply from: "$rootDir/gradle/disable-static.gradle"

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

compileJmhKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

model {
    platforms {
        linux {
            operatingSystem 'linux'
        }
        osx {
            operatingSystem 'osx'
        }
        windows {
            operatingSystem 'windows'
        }
    }

    toolChains {
        visualCpp(VisualCpp) {
            /* this is not pretty, but:
               1. Gradle currently doesn't always play nice with Visual Studio 2017
               2. Gradle currently doesn't have any other way to specify Visual Studio version
               3. Without "file://", the build script causes exceptions on Linux, since it tries to convert
                 this string to Unix path, which leads to a problem with spaces. */
            installDir "file://C:/Program Files (x86)/Microsoft Visual Studio 14.0"
        }
        
        gcc(Gcc)
        
        clang(Clang)
    }

    components {
        loader(NativeLibrarySpec) {
            sources {
                cpp.lib library: 'jniHeaders', linkage: 'api'
            }

            targetPlatform 'linux'
            targetPlatform 'windows'
            targetPlatform 'osx'

            binaries.withType(SharedLibraryBinarySpec) {
                def libraryName = System.mapLibraryName('simd.x86_64')
                sharedLibraryFile = file("$buildDir/libs/$libraryName")
            }
        }

        simd(NativeLibrarySpec) {
            sources {
                cpp.lib library: 'boostSimd', linkage: 'api'
                cpp.lib library: 'jniHeaders', linkage: 'api'
            }

            flavors {
                sse2
                avx
            }

            targetPlatform 'linux'
            targetPlatform 'windows'
            targetPlatform 'osx'
            targetFlavors 'sse2', 'avx'

            binaries.withType(SharedLibraryBinarySpec) {
                switch (flavor) {
                    case flavors.sse2: if (targetPlatform == 'windows') {
                        cppCompiler.args '/arch:SSE2'
                    } else {
                        cppCompiler.args '-msse2'
                    }; break
                    case flavors.avx: if (targetPlatform == 'windows') {
                        cppCompiler.args '/arch:AVX'
                    } else {
                        cppCompiler.args '-mavx'
                    }; break
                }

                def libraryName = System.mapLibraryName("simd.${flavor.name}.x86_64")
                sharedLibraryFile = file("$buildDir/libs/$libraryName")
            }
        }
    }

    components {
        all {
            binaries.all {
                cppCompiler.define 'BOOST_DISABLE_ASSERTS'
                cppCompiler.define 'NDEBUG'

                if (toolChain in Gcc) {
                    cppCompiler.args('-std=c++11', '-fno-rtti', '-fno-exceptions',
                            '-O3', '-Wno-narrowing')
                }
                if (toolChain in VisualCpp) {
                    cppCompiler.args('/GR-', '/O2')
                }
                if (toolChain in Clang) {
                    cppCompiler.args('-stdlib=libc++', '-std=c++1y')
                }
            }
        }
    }

    tasks {
        buildAllVariants(Task) {
            dependsOn $.binaries.findAll { it.buildable }
        }
    }
}

task jniHeaders(dependsOn: compileKotlin) {
    def outputDir = file("$buildDir/include")
    def jniClasses = [
        'org.jetbrains.bio.viktor.NativeSpeedups',
        'org.jetbrains.bio.viktor.LoaderKt'
    ]
    def jniHeaders = jniClasses.collect {
        new File(outputDir, it.replace('.', '_') + '.hpp')
    }

    inputs.files sourceSets.main.output
    outputs.files jniHeaders

    doLast {
        outputDir.mkdirs()
        [jniClasses, jniHeaders].transpose().each(javah)
    }
}

tasks.withType(CppCompile) {
    dependsOn 'jniHeaders'
    dependsOn 'installBoostSimd'
}

repositories {
    jcenter()
}

dependencies {
    compile 'org.apache.commons:commons-math3:3.6'
    compile "org.jetbrains.bio:npy:0.3.3"
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    compile 'log4j:log4j:1.2.17'

    testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    testCompile 'junit:junit:4.12'

    jmh files("$rootDir/libs/yeppp-bundle-1.0.jar")
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

compileJmhKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

dokka {
    moduleName = "$version"
    outputFormat = 'gfm'
    outputDirectory = "$rootDir/docs"

    linkMapping {
        dir = 'src/main/kotlin'
        url = "https://github.com/JetBrains-Research/viktor/blob/${project.version}/src/main/kotlin"
        suffix = '#L'
    }
}

test {
    dependsOn 'buildAllVariants'
    systemProperty 'java.library.path', "$buildDir/libs"
}

jmh {
    includeTests = false
}

apply plugin: 'idea'

idea {
    module {
        scopes.COMPILE.plus += [configurations.jmh]
    }
}

jar {
    archivesBaseName = 'viktor'
    dependsOn 'buildAllVariants'
    from "$buildDir/libs"
    exclude '*.jar'
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives sourcesJar
}

publishing {
    group = 'org.jetbrains.bio'
    version = project.version

    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifactId 'viktor'
            artifact sourcesJar
        }
    }
}

bintray {
    user = project.hasProperty('bintrayUser') ? project.bintrayUser : System.getenv('BINTRAY_USER')
    key = project.hasProperty('bintrayKey') ? project.bintrayKey : System.getenv('BINTRAY_KEY')
    publications = ['mavenJava']
    pkg {
        repo = 'maven'
        name = 'viktor'
        userOrg = 'jetbrains-research'
        licenses = ['MIT']
        version {
            name = project.version.toString()
        }
    }
}

bintrayUpload.doFirst {
    assert file("./build/libs/libsimd.x86_64.so").exists()
    assert file("./build/libs/libsimd.x86_64.dylib").exists()
    assert file("./build/libs/simd.x86_64.dll").exists()
}

wrapper {
    gradleVersion = '4.10'
}
